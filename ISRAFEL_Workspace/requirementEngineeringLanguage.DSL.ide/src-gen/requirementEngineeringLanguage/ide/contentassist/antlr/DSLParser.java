/*
 * generated by Xtext 2.12.0
 */
package requirementEngineeringLanguage.ide.contentassist.antlr;

import com.google.inject.Inject;
import java.util.HashMap;
import java.util.Map;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.AbstractContentAssistParser;
import requirementEngineeringLanguage.ide.contentassist.antlr.internal.InternalDSLParser;
import requirementEngineeringLanguage.services.DSLGrammarAccess;

public class DSLParser extends AbstractContentAssistParser {

	@Inject
	private DSLGrammarAccess grammarAccess;

	private Map<AbstractElement, String> nameMappings;

	@Override
	protected InternalDSLParser createParser() {
		InternalDSLParser result = new InternalDSLParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}

	@Override
	protected String getRuleName(AbstractElement element) {
		if (nameMappings == null) {
			nameMappings = new HashMap<AbstractElement, String>() {
				private static final long serialVersionUID = 1L;
				{
					put(grammarAccess.getWhenAccess().getAlternatives(), "rule__When__Alternatives");
					put(grammarAccess.getThenAccess().getAlternatives(), "rule__Then__Alternatives");
					put(grammarAccess.getEStringAccess().getAlternatives(), "rule__EString__Alternatives");
					put(grammarAccess.getDataTypeAccess().getAlternatives(), "rule__DataType__Alternatives");
					put(grammarAccess.getContainerTypeAccess().getAlternatives(), "rule__ContainerType__Alternatives");
					put(grammarAccess.getQuantifierAccess().getAlternatives(), "rule__Quantifier__Alternatives");
					put(grammarAccess.getStateAccess().getAlternatives(), "rule__State__Alternatives");
					put(grammarAccess.getActionAccess().getAlternatives(), "rule__Action__Alternatives");
					put(grammarAccess.getReactionAccess().getAlternatives(), "rule__Reaction__Alternatives");
					put(grammarAccess.getTaxonomyAccess().getAlternatives(), "rule__Taxonomy__Alternatives");
					put(grammarAccess.getProjectAccess().getGroup(), "rule__Project__Group__0");
					put(grammarAccess.getBackgroundAccess().getGroup(), "rule__Background__Group__0");
					put(grammarAccess.getViewAccess().getGroup(), "rule__View__Group__0");
					put(grammarAccess.getViewAccess().getGroup_2(), "rule__View__Group_2__0");
					put(grammarAccess.getFeatureAccess().getGroup(), "rule__Feature__Group__0");
					put(grammarAccess.getFeatureAccess().getGroup_2(), "rule__Feature__Group_2__0");
					put(grammarAccess.getScenarioAccess().getGroup(), "rule__Scenario__Group__0");
					put(grammarAccess.getScenarioAccess().getGroup_2(), "rule__Scenario__Group_2__0");
					put(grammarAccess.getScenarioAccess().getGroup_5(), "rule__Scenario__Group_5__0");
					put(grammarAccess.getScenarioAccess().getGroup_8(), "rule__Scenario__Group_8__0");
					put(grammarAccess.getGivenAccess().getGroup(), "rule__Given__Group__0");
					put(grammarAccess.getGivenAccess().getGroup_2(), "rule__Given__Group_2__0");
					put(grammarAccess.getGivenAccess().getGroup_2_2(), "rule__Given__Group_2_2__0");
					put(grammarAccess.getDataAccess().getGroup(), "rule__Data__Group__0");
					put(grammarAccess.getDataAccess().getGroup_2(), "rule__Data__Group_2__0");
					put(grammarAccess.getDataAccess().getGroup_3(), "rule__Data__Group_3__0");
					put(grammarAccess.getLoadingAccess().getGroup(), "rule__Loading__Group__0");
					put(grammarAccess.getInteractionAccess().getGroup(), "rule__Interaction__Group__0");
					put(grammarAccess.getUpdateAccess().getGroup(), "rule__Update__Group__0");
					put(grammarAccess.getGoalAccess().getGroup(), "rule__Goal__Group__0");
					put(grammarAccess.getGoalAccess().getGroup_2(), "rule__Goal__Group_2__0");
					put(grammarAccess.getGoalAccess().getGroup_2_2(), "rule__Goal__Group_2_2__0");
					put(grammarAccess.getProjectAccess().getNameAssignment_1(), "rule__Project__NameAssignment_1");
					put(grammarAccess.getProjectAccess().getBackgroundAssignment_3(), "rule__Project__BackgroundAssignment_3");
					put(grammarAccess.getProjectAccess().getBackgroundAssignment_4(), "rule__Project__BackgroundAssignment_4");
					put(grammarAccess.getProjectAccess().getConsistOfAssignment_5(), "rule__Project__ConsistOfAssignment_5");
					put(grammarAccess.getProjectAccess().getConsistOfAssignment_6(), "rule__Project__ConsistOfAssignment_6");
					put(grammarAccess.getBackgroundAccess().getDashboardAssignment_1(), "rule__Background__DashboardAssignment_1");
					put(grammarAccess.getBackgroundAccess().getViewAssignment_3(), "rule__Background__ViewAssignment_3");
					put(grammarAccess.getBackgroundAccess().getViewAssignment_4(), "rule__Background__ViewAssignment_4");
					put(grammarAccess.getViewAccess().getNameAssignment_1(), "rule__View__NameAssignment_1");
					put(grammarAccess.getViewAccess().getDescAssignment_2_1(), "rule__View__DescAssignment_2_1");
					put(grammarAccess.getFeatureAccess().getNameAssignment_1(), "rule__Feature__NameAssignment_1");
					put(grammarAccess.getFeatureAccess().getDescAssignment_2_1(), "rule__Feature__DescAssignment_2_1");
					put(grammarAccess.getFeatureAccess().getSpecifiedByAssignment_3(), "rule__Feature__SpecifiedByAssignment_3");
					put(grammarAccess.getFeatureAccess().getSpecifiedByAssignment_4(), "rule__Feature__SpecifiedByAssignment_4");
					put(grammarAccess.getScenarioAccess().getNameAssignment_1(), "rule__Scenario__NameAssignment_1");
					put(grammarAccess.getScenarioAccess().getSystemAssignment_2_1(), "rule__Scenario__SystemAssignment_2_1");
					put(grammarAccess.getScenarioAccess().getTriggerAssignment_4(), "rule__Scenario__TriggerAssignment_4");
					put(grammarAccess.getScenarioAccess().getTriggerAssignment_5_1(), "rule__Scenario__TriggerAssignment_5_1");
					put(grammarAccess.getScenarioAccess().getOutcomeAssignment_7(), "rule__Scenario__OutcomeAssignment_7");
					put(grammarAccess.getScenarioAccess().getOutcomeAssignment_8_1(), "rule__Scenario__OutcomeAssignment_8_1");
					put(grammarAccess.getGivenAccess().getDashboardAssignment_1(), "rule__Given__DashboardAssignment_1");
					put(grammarAccess.getGivenAccess().getDataAssignment_2_1(), "rule__Given__DataAssignment_2_1");
					put(grammarAccess.getGivenAccess().getDataAssignment_2_2_1(), "rule__Given__DataAssignment_2_2_1");
					put(grammarAccess.getDataAccess().getQuantifierAssignment_1(), "rule__Data__QuantifierAssignment_1");
					put(grammarAccess.getDataAccess().getTypeAssignment_2_1(), "rule__Data__TypeAssignment_2_1");
					put(grammarAccess.getDataAccess().getLocationTypeAssignment_3_1(), "rule__Data__LocationTypeAssignment_3_1");
					put(grammarAccess.getDataAccess().getLocationAssignment_3_2(), "rule__Data__LocationAssignment_3_2");
					put(grammarAccess.getLoadingAccess().getContextAssignment_0(), "rule__Loading__ContextAssignment_0");
					put(grammarAccess.getLoadingAccess().getNewAssignment_2(), "rule__Loading__NewAssignment_2");
					put(grammarAccess.getInteractionAccess().getActionAssignment_0(), "rule__Interaction__ActionAssignment_0");
					put(grammarAccess.getInteractionAccess().getTargetAssignment_1(), "rule__Interaction__TargetAssignment_1");
					put(grammarAccess.getInteractionAccess().getContextAssignment_3(), "rule__Interaction__ContextAssignment_3");
					put(grammarAccess.getUpdateAccess().getTargetAssignment_0(), "rule__Update__TargetAssignment_0");
					put(grammarAccess.getUpdateAccess().getDoAssignment_2(), "rule__Update__DoAssignment_2");
					put(grammarAccess.getGoalAccess().getFunctionAssignment_1(), "rule__Goal__FunctionAssignment_1");
					put(grammarAccess.getGoalAccess().getDataAssignment_2_1(), "rule__Goal__DataAssignment_2_1");
					put(grammarAccess.getGoalAccess().getDataAssignment_2_2_1(), "rule__Goal__DataAssignment_2_2_1");
				}
			};
		}
		return nameMappings.get(element);
	}
			
	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}

	public DSLGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}

	public void setGrammarAccess(DSLGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
}
