/*
 * generated by Xtext 2.12.0
 */
package sensorDeploymentLanguage.ide.contentassist.antlr;

import com.google.inject.Inject;
import java.util.HashMap;
import java.util.Map;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.AbstractContentAssistParser;
import sensorDeploymentLanguage.ide.contentassist.antlr.internal.InternalDSLParser;
import sensorDeploymentLanguage.services.DSLGrammarAccess;

public class DSLParser extends AbstractContentAssistParser {

	@Inject
	private DSLGrammarAccess grammarAccess;

	private Map<AbstractElement, String> nameMappings;

	@Override
	protected InternalDSLParser createParser() {
		InternalDSLParser result = new InternalDSLParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}

	@Override
	protected String getRuleName(AbstractElement element) {
		if (nameMappings == null) {
			nameMappings = new HashMap<AbstractElement, String>() {
				private static final long serialVersionUID = 1L;
				{
					put(grammarAccess.getContainableAccess().getAlternatives(), "rule__Containable__Alternatives");
					put(grammarAccess.getDataTypeAccess().getAlternatives(), "rule__DataType__Alternatives");
					put(grammarAccess.getEStringAccess().getAlternatives(), "rule__EString__Alternatives");
					put(grammarAccess.getFieldAccess().getAlternatives(), "rule__Field__Alternatives");
					put(grammarAccess.getRangeAccess().getAlternatives(), "rule__Range__Alternatives");
					put(grammarAccess.getIntegerAccess().getAlternatives(), "rule__Integer__Alternatives");
					put(grammarAccess.getFloatAccess().getAlternatives(), "rule__Float__Alternatives");
					put(grammarAccess.getEFloatAccess().getAlternatives_4_0(), "rule__EFloat__Alternatives_4_0");
					put(grammarAccess.getContainerTypeAccess().getAlternatives(), "rule__ContainerType__Alternatives");
					put(grammarAccess.getCatalogAccess().getGroup(), "rule__Catalog__Group__0");
					put(grammarAccess.getContainerAccess().getGroup(), "rule__Container__Group__0");
					put(grammarAccess.getContainerAccess().getGroup_2(), "rule__Container__Group_2__0");
					put(grammarAccess.getPeriodicAccess().getGroup(), "rule__Periodic__Group__0");
					put(grammarAccess.getPeriodicAccess().getGroup_7(), "rule__Periodic__Group_7__0");
					put(grammarAccess.getEvent_BasedAccess().getGroup(), "rule__Event_Based__Group__0");
					put(grammarAccess.getEvent_BasedAccess().getGroup_6(), "rule__Event_Based__Group_6__0");
					put(grammarAccess.getObservationAccess().getGroup(), "rule__Observation__Group__0");
					put(grammarAccess.getAtomicAccess().getGroup(), "rule__Atomic__Group__0");
					put(grammarAccess.getCalculatedAccess().getGroup(), "rule__Calculated__Group__0");
					put(grammarAccess.getCalculatedAccess().getGroup_7(), "rule__Calculated__Group_7__0");
					put(grammarAccess.getContinuousAccess().getGroup(), "rule__Continuous__Group__0");
					put(grammarAccess.getDiscreteAccess().getGroup(), "rule__Discrete__Group__0");
					put(grammarAccess.getDiscreteAccess().getGroup_2(), "rule__Discrete__Group_2__0");
					put(grammarAccess.getIntegerAccess().getGroup_0(), "rule__Integer__Group_0__0");
					put(grammarAccess.getFloatAccess().getGroup_0(), "rule__Float__Group_0__0");
					put(grammarAccess.getString0Access().getGroup(), "rule__String0__Group__0");
					put(grammarAccess.getEIntAccess().getGroup(), "rule__EInt__Group__0");
					put(grammarAccess.getEFloatAccess().getGroup(), "rule__EFloat__Group__0");
					put(grammarAccess.getEFloatAccess().getGroup_4(), "rule__EFloat__Group_4__0");
					put(grammarAccess.getCatalogAccess().getNameAssignment_1(), "rule__Catalog__NameAssignment_1");
					put(grammarAccess.getCatalogAccess().getRecordsAssignment_3(), "rule__Catalog__RecordsAssignment_3");
					put(grammarAccess.getCatalogAccess().getRecordsAssignment_4(), "rule__Catalog__RecordsAssignment_4");
					put(grammarAccess.getCatalogAccess().getPatternsAssignment_6(), "rule__Catalog__PatternsAssignment_6");
					put(grammarAccess.getCatalogAccess().getPatternsAssignment_7(), "rule__Catalog__PatternsAssignment_7");
					put(grammarAccess.getContainerAccess().getTypeAssignment_0(), "rule__Container__TypeAssignment_0");
					put(grammarAccess.getContainerAccess().getNameAssignment_1(), "rule__Container__NameAssignment_1");
					put(grammarAccess.getContainerAccess().getContainsAssignment_2_1(), "rule__Container__ContainsAssignment_2_1");
					put(grammarAccess.getPeriodicAccess().getNameAssignment_1(), "rule__Periodic__NameAssignment_1");
					put(grammarAccess.getPeriodicAccess().getObservesAssignment_3(), "rule__Periodic__ObservesAssignment_3");
					put(grammarAccess.getPeriodicAccess().getPeriodAssignment_5(), "rule__Periodic__PeriodAssignment_5");
					put(grammarAccess.getPeriodicAccess().getCalculatedFromAssignment_7_1(), "rule__Periodic__CalculatedFromAssignment_7_1");
					put(grammarAccess.getEvent_BasedAccess().getNameAssignment_1(), "rule__Event_Based__NameAssignment_1");
					put(grammarAccess.getEvent_BasedAccess().getObservesAssignment_3(), "rule__Event_Based__ObservesAssignment_3");
					put(grammarAccess.getEvent_BasedAccess().getTriggerAssignment_5(), "rule__Event_Based__TriggerAssignment_5");
					put(grammarAccess.getEvent_BasedAccess().getCalculatedFromAssignment_6_1(), "rule__Event_Based__CalculatedFromAssignment_6_1");
					put(grammarAccess.getObservationAccess().getNameAssignment_0(), "rule__Observation__NameAssignment_0");
					put(grammarAccess.getObservationAccess().getTimeAssignment_2(), "rule__Observation__TimeAssignment_2");
					put(grammarAccess.getObservationAccess().getValuesAssignment_3(), "rule__Observation__ValuesAssignment_3");
					put(grammarAccess.getObservationAccess().getValuesAssignment_4(), "rule__Observation__ValuesAssignment_4");
					put(grammarAccess.getAtomicAccess().getNameAssignment_0(), "rule__Atomic__NameAssignment_0");
					put(grammarAccess.getAtomicAccess().getRangeAssignment_2(), "rule__Atomic__RangeAssignment_2");
					put(grammarAccess.getCalculatedAccess().getNameAssignment_0(), "rule__Calculated__NameAssignment_0");
					put(grammarAccess.getCalculatedAccess().getRangeAssignment_2(), "rule__Calculated__RangeAssignment_2");
					put(grammarAccess.getCalculatedAccess().getFunctionAssignment_4(), "rule__Calculated__FunctionAssignment_4");
					put(grammarAccess.getCalculatedAccess().getOperandsAssignment_6(), "rule__Calculated__OperandsAssignment_6");
					put(grammarAccess.getCalculatedAccess().getOperandsAssignment_7_1(), "rule__Calculated__OperandsAssignment_7_1");
					put(grammarAccess.getContinuousAccess().getMinAssignment_2(), "rule__Continuous__MinAssignment_2");
					put(grammarAccess.getContinuousAccess().getMaxAssignment_4(), "rule__Continuous__MaxAssignment_4");
					put(grammarAccess.getDiscreteAccess().getValuesAssignment_1(), "rule__Discrete__ValuesAssignment_1");
					put(grammarAccess.getDiscreteAccess().getValuesAssignment_2_1(), "rule__Discrete__ValuesAssignment_2_1");
					put(grammarAccess.getIntegerAccess().getValueAssignment_0_1(), "rule__Integer__ValueAssignment_0_1");
					put(grammarAccess.getFloatAccess().getValueAssignment_0_1(), "rule__Float__ValueAssignment_0_1");
					put(grammarAccess.getString0Access().getValueAssignment_1(), "rule__String0__ValueAssignment_1");
				}
			};
		}
		return nameMappings.get(element);
	}
			
	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}

	public DSLGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}

	public void setGrammarAccess(DSLGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
}
