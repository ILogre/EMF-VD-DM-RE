// automatically generated by Xtext
grammar sensorDeploymentLanguage.DSL.SD with org.eclipse.xtext.common.Terminals

import "fr.uns.i3s.sparks.modalis.israfel.sensordeploymentlanguage"
import "http://www.eclipse.org/emf/2002/Ecore" as ecore

Catalog returns Catalog:
	'Catalog' name=EString
		'Infrastructure :'
		records+=Container
		(records+=Container)*
		
		'Observation patterns :'
		patterns+=Observation
		(patterns+=Observation)*;


Container returns Container:
	type=ContainerType name=EString
	('⌞' contains+=Containable)+ '□';

Containable returns Containable:
	Container | Periodic | Event_Based;

Periodic returns Periodic:
	'Periodic sensor' name=EString 'observes' observes=[Observation|EString] 'every' period=EInt 'seconds' ('is calculated from' calculatedFrom=[Sensor|EString])?;

Event_Based returns Event_Based:
	'Event Based sensor' name=EString 'observes' observes=[Observation|EString] 'when' trigger=EString ('is calculated from' calculatedFrom=[Sensor|EString])?;

DataType returns DataType:
	Integer | Float | String0;

EString returns ecore::EString:
	STRING | ID;

Observation returns Observation:
	name=EString 'with' time=Field
	values+=Field
	(values+=Field)*;

Field returns Field:
	Atomic | Calculated;

Atomic returns Atomic:
	name=EString 'in range' range=Range;

Calculated returns Calculated:
	name=EString 'in range' range=Range 'calculated from function' function=EString 'on' operands+=[Field|EString] ( "," operands+=[Field|EString])*;

Range returns Range:
	Continuous | Discrete;

Continuous returns Continuous:
	{Continuous}
	'['(min=DataType)? '...' (max=DataType)?']';

Discrete returns Discrete:
	'[' values+=DataType ( ";" values+=DataType)* ']';

enum ContainerType returns ContainerType:
	Building = 'Building' | Floor = 'Floor' | Corridor = 'Corridor' | Room = 'Room' | Furniture = 'Furniture' | Wall = 'Wall' | Window = 'Window';

Integer returns Integer:
	{Integer}
	value=EInt | 'inf' ;

Float returns Float:
	{Float}
	value=EFloat | 'inf' ;

String0 returns String:
	{String}
	value=EString;

EInt returns ecore::EInt:
	'-'? INT;

EFloat returns ecore::EFloat:
	'-'? INT? '.' INT (('E'|'e') '-'? INT)?;
