/*
 * generated by Xtext 2.12.0
 */
package visualizationDesignLanguage.ide.contentassist.antlr;

import com.google.inject.Inject;
import java.util.HashMap;
import java.util.Map;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.AbstractContentAssistParser;
import visualizationDesignLanguage.ide.contentassist.antlr.internal.InternalDSLParser;
import visualizationDesignLanguage.services.DSLGrammarAccess;

public class DSLParser extends AbstractContentAssistParser {

	@Inject
	private DSLGrammarAccess grammarAccess;

	private Map<AbstractElement, String> nameMappings;

	@Override
	protected InternalDSLParser createParser() {
		InternalDSLParser result = new InternalDSLParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}

	@Override
	protected String getRuleName(AbstractElement element) {
		if (nameMappings == null) {
			nameMappings = new HashMap<AbstractElement, String>() {
				private static final long serialVersionUID = 1L;
				{
					put(grammarAccess.getHowQualifierAccess().getAlternatives(), "rule__HowQualifier__Alternatives");
					put(grammarAccess.getContainerAccess().getAlternatives_0(), "rule__Container__Alternatives_0");
					put(grammarAccess.getEStringAccess().getAlternatives(), "rule__EString__Alternatives");
					put(grammarAccess.getDataPropertyAccess().getAlternatives(), "rule__DataProperty__Alternatives");
					put(grammarAccess.getTaxonomyAccess().getAlternatives(), "rule__Taxonomy__Alternatives");
					put(grammarAccess.getDashboardAccess().getGroup(), "rule__Dashboard__Group__0");
					put(grammarAccess.getVisualizationAccess().getGroup(), "rule__Visualization__Group__0");
					put(grammarAccess.getVisualizationAccess().getGroup_1(), "rule__Visualization__Group_1__0");
					put(grammarAccess.getVisualizationAccess().getGroup_1_2(), "rule__Visualization__Group_1_2__0");
					put(grammarAccess.getVisualizationAccess().getGroup_4(), "rule__Visualization__Group_4__0");
					put(grammarAccess.getSourceAccess().getGroup(), "rule__Source__Group__0");
					put(grammarAccess.getSourceAccess().getGroup_1(), "rule__Source__Group_1__0");
					put(grammarAccess.getSourceAccess().getGroup_2(), "rule__Source__Group_2__0");
					put(grammarAccess.getSourceAccess().getGroup_4(), "rule__Source__Group_4__0");
					put(grammarAccess.getSourceAccess().getGroup_4_1(), "rule__Source__Group_4_1__0");
					put(grammarAccess.getWindowAccess().getGroup(), "rule__Window__Group__0");
					put(grammarAccess.getWindowAccess().getGroup_4(), "rule__Window__Group_4__0");
					put(grammarAccess.getContainerAccess().getGroup(), "rule__Container__Group__0");
					put(grammarAccess.getContainerAccess().getGroup_0_0(), "rule__Container__Group_0_0__0");
					put(grammarAccess.getContainerAccess().getGroup_0_1(), "rule__Container__Group_0_1__0");
					put(grammarAccess.getContainerAccess().getGroup_1(), "rule__Container__Group_1__0");
					put(grammarAccess.getContainerAccess().getGroup_4(), "rule__Container__Group_4__0");
					put(grammarAccess.getIconAccess().getGroup(), "rule__Icon__Group__0");
					put(grammarAccess.getColorizationAccess().getGroup(), "rule__Colorization__Group__0");
					put(grammarAccess.getThresholdAccess().getGroup(), "rule__Threshold__Group__0");
					put(grammarAccess.getThresholdAccess().getGroup_2(), "rule__Threshold__Group_2__0");
					put(grammarAccess.getThresholdAccess().getGroup_3(), "rule__Threshold__Group_3__0");
					put(grammarAccess.getEIntAccess().getGroup(), "rule__EInt__Group__0");
					put(grammarAccess.getDashboardAccess().getNameAssignment_1(), "rule__Dashboard__NameAssignment_1");
					put(grammarAccess.getDashboardAccess().getVisualizationsAssignment_4(), "rule__Dashboard__VisualizationsAssignment_4");
					put(grammarAccess.getDashboardAccess().getVisualizationsAssignment_5(), "rule__Dashboard__VisualizationsAssignment_5");
					put(grammarAccess.getDashboardAccess().getWindowsAssignment_7(), "rule__Dashboard__WindowsAssignment_7");
					put(grammarAccess.getDashboardAccess().getWindowsAssignment_8(), "rule__Dashboard__WindowsAssignment_8");
					put(grammarAccess.getVisualizationAccess().getNameAssignment_0(), "rule__Visualization__NameAssignment_0");
					put(grammarAccess.getVisualizationAccess().getConcernsAssignment_1_1(), "rule__Visualization__ConcernsAssignment_1_1");
					put(grammarAccess.getVisualizationAccess().getConcernsAssignment_1_2_1(), "rule__Visualization__ConcernsAssignment_1_2_1");
					put(grammarAccess.getVisualizationAccess().getDisplaysAssignment_3(), "rule__Visualization__DisplaysAssignment_3");
					put(grammarAccess.getVisualizationAccess().getDisplaysAssignment_4_1(), "rule__Visualization__DisplaysAssignment_4_1");
					put(grammarAccess.getWhatQualifierAccess().getConcernAssignment(), "rule__WhatQualifier__ConcernAssignment");
					put(grammarAccess.getSourceAccess().getNameAssignment_0(), "rule__Source__NameAssignment_0");
					put(grammarAccess.getSourceAccess().getTypeAssignment_1_1(), "rule__Source__TypeAssignment_1_1");
					put(grammarAccess.getSourceAccess().getLocationAssignment_2_1(), "rule__Source__LocationAssignment_2_1");
					put(grammarAccess.getSourceAccess().getConcernsAssignment_4_0(), "rule__Source__ConcernsAssignment_4_0");
					put(grammarAccess.getSourceAccess().getConcernsAssignment_4_1_1(), "rule__Source__ConcernsAssignment_4_1_1");
					put(grammarAccess.getWindowAccess().getNameAssignment_1(), "rule__Window__NameAssignment_1");
					put(grammarAccess.getWindowAccess().getOrganizesAssignment_3(), "rule__Window__OrganizesAssignment_3");
					put(grammarAccess.getWindowAccess().getOrganizesAssignment_4_1(), "rule__Window__OrganizesAssignment_4_1");
					put(grammarAccess.getContainerAccess().getPonderationAssignment_1_1(), "rule__Container__PonderationAssignment_1_1");
					put(grammarAccess.getContainerAccess().getContainsAssignment_3(), "rule__Container__ContainsAssignment_3");
					put(grammarAccess.getContainerAccess().getContainsAssignment_4_1(), "rule__Container__ContainsAssignment_4_1");
					put(grammarAccess.getCellAccess().getWrapsAssignment(), "rule__Cell__WrapsAssignment");
					put(grammarAccess.getColorizationAccess().getColorAssignment_2(), "rule__Colorization__ColorAssignment_2");
					put(grammarAccess.getPropertyAccess().getValueAssignment(), "rule__Property__ValueAssignment");
					put(grammarAccess.getThresholdAccess().getMinAssignment_2_1(), "rule__Threshold__MinAssignment_2_1");
					put(grammarAccess.getThresholdAccess().getMaxAssignment_3_1(), "rule__Threshold__MaxAssignment_3_1");
				}
			};
		}
		return nameMappings.get(element);
	}
			
	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}

	public DSLGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}

	public void setGrammarAccess(DSLGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
}
